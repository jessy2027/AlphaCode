/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { Event } from '../../../../base/common/event.js';
import { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';

export const IAlphaCodeChatService = createDecorator<IAlphaCodeChatService>(
	'alphaCodeChatService',
);

export interface IChatMessage {
	id: string;
	role: 'user' | 'assistant' | 'system' | 'tool';
	content: string;
	timestamp: number;
	tokens?: number;
	toolCalls?: IToolCall[];
	toolCallId?: string;
	metadata?: Record<string, any>;
	hidden?: boolean; // Pour les messages système non visibles par l'utilisateur
}

export interface IChatSession {
	id: string;
	title: string;
	messages: IChatMessage[];
	created: number;
	updated: number;
}

export interface IChatContext {
	activeFile?: string;
	selectedCode?: string;
	openFiles?: string[];
	workspaceFiles?: string[];
	symbols?: string[];
	workspaceSnippets?: string[];
}

export interface IStreamChunk {
	content: string;
	done: boolean;
	messageId?: string;
}

export interface IToolCall {
	id: string;
	name: string;
	parameters: any;
	detectedAt?: number; // Timestamp de détection pour ordre chronologique
}

export interface IToolResult {
	toolCallId: string;
	result: string;
	error?: string;
}

export interface IChatTool {
	name: string;
	description: string;
	parameters: {
		type: 'object';
		properties: Record<
			string,
			{
				type: string;
				description: string;
				required?: boolean;
			}
		>;
		required?: string[];
	};
	execute(parameters: any): Promise<string>;
}

export interface IEditProposalChange {
	lineNumber: number;
	oldText: string;
	newText: string;
}

export interface IEditProposalWithChanges {
	id: string;
	path: string;
	filePath: string;
	kind: 'write' | 'edit';
	originalContent: string;
	proposedContent: string;
	changes: IEditProposalChange[];
	timestamp: number;
	status: 'pending' | 'accepted' | 'rejected' | 'partially-accepted';
}

export interface IProposalDecision {
	proposalId: string;
	action: 'accept-all' | 'reject-all' | 'accept-changes' | 'reject-changes';
	changeIndexes?: number[]; // For granular control
}

export interface IAlphaCodeChatService {
	readonly _serviceBrand: undefined;

	/**
	 * Event fired when a message is added to the current session
	 */
	readonly onDidAddMessage: Event<IChatMessage>;

	/**
	 * Event fired when a new session is created
	 */
	readonly onDidCreateSession: Event<IChatSession>;

	/**
	 * Event fired when streaming chunks arrive
	 */
	readonly onDidStreamChunk: Event<IStreamChunk>;

	/**
	 * Event fired when a new edit proposal is created
	 */
	readonly onDidCreateProposal: Event<IEditProposalWithChanges>;

	/**
	 * Event fired when a proposal status changes
	 */
	readonly onDidChangeProposalStatus: Event<IEditProposalWithChanges>;

	/**
	 * Get the current chat session
	 */
	getCurrentSession(): IChatSession | undefined;

	/**
	 * Create a new chat session
	 */
	createSession(title?: string): IChatSession;

	/**
	 * Switch to a different session
	 */
	switchSession(sessionId: string): void;

	/**
	 * Send a message in the current session
	 */
	sendMessage(content: string, context?: IChatContext): Promise<void>;

	/**
	 * Get all chat sessions
	 */
	getSessions(): IChatSession[];

	/**
	 * Delete a session
	 */
	deleteSession(sessionId: string): Promise<void>;

	/**
	 * Clear the current session
	 */
	clearCurrentSession(): Promise<void>;

	/**
	 * Export session to JSON
	 */
	exportSession(sessionId: string): string;

	/**
	 * Get available tools
	 */
	getAvailableTools(): IChatTool[];

	/**
	 * Execute a tool call
	 */
	executeToolCall(toolCall: IToolCall): Promise<IToolResult>;

	/**
	 * Accept a pending edit proposal generated by a tool.
	 */
	acceptProposal(proposalId: string): Promise<void>;

	/**
	 * Reject a pending edit proposal generated by a tool.
	 */
	rejectProposal(proposalId: string): Promise<void>;

	/**
	 * Returns true when the proposal is still pending.
	 */
	hasPendingProposal(proposalId: string): boolean;

	/**
	 * Get all pending proposals with detailed changes
	 */
	getPendingProposals(): IEditProposalWithChanges[];

	/**
	 * Get a specific proposal by ID
	 */
	getProposal(proposalId: string): IEditProposalWithChanges | undefined;

	/**
	 * Accept or reject specific changes in a proposal
	 */
	applyProposalDecision(decision: IProposalDecision): Promise<void>;

	/**
	 * Accept all pending proposals
	 */
	acceptAllProposals(): Promise<void>;

	/**
	 * Reject all pending proposals
	 */
	rejectAllProposals(): Promise<void>;

	/**
	 * Get the audit log of proposal decisions
	 */
	getProposalAuditLog(): Array<{
		id: string;
		path: string;
		action: string;
		timestamp: number;
	}>;

	/**
	 * Abort the current streaming response
	 */
	abortCurrentStream(): void;

	/**
	 * Check if a stream is currently active
	 */
	isCurrentlyStreaming(): boolean;
}
